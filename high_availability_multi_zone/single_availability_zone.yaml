# External ELB invoking a private subnet webserver - Single Availability Zone.
# 
# Components: 
#   VPC 
#   Internet Gateway
#   Elastic IP
#   AZa Subnet Public
#   AZa Subnet Private
#   NAT Gateway
#   Route Table Public
#   Route Table Private
#   Security Group Public
#   Security Group Private
#   Security Group ELB

# How to create CloudFormation Stack using AWS CLI:
# 1. Create S3 bucket: aws s3api create-bucket --bucket ariesmcrae-cloudformation --region ap-southeast-2
# 2. Upload this file to s3: aws s3 cp single_availability_zone.yaml s3://ariesmcrae-cloudformation/single_availability_zone.yaml
# 3. aws cloudformation create-stack --region us-west-2 --stack-name myproject-dev --template-url https://s3.amazonaws.com/ariesmcrae-cloudformation/single_availability_zone.yaml
#    or: aws cloudformation update-stack --region us-west-2 --stack-name myproject-dev --template-url https://s3.amazonaws.com/ariesmcrae-cloudformation/single_availability_zone.yaml
#    or: aws cloudformation delete-stack --region us-west-2 --stack-name myproject-dev
# 4. aws cloudformation describe-stacks --region us-west-2
# 5. aws cloudformation validate-template --template-body file://./single_availability_zone.yaml

AWSTemplateFormatVersion: '2010-09-09'


Description: 'myproject DEV Stack'


Parameters: 
  InstanceType: 
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano     
      - t2.micro
    Description: Enter t2.nano, t2.micro. Default is t2.micro.
    ConstraintDescription: Must be a valid EC2 instance type.    


Mappings:
  AWSRegionToAMI:
    us-west-2: # oregon
      AMIID: ami-56ed4936 #ECS AMI
    ap-southeast-2: #sydney
      AMIID: ami-73407d10 #ECS AMI
    amazon:
        AMIID: ami-5ec1673e  
  Config:
    SubnetPublic:
      CIDRAZa: 10.0.1.0/24
      CIDRAZb: 10.0.2.0/24      
    SubnetPrivate:
      CIDRAZa: 10.0.3.0/24      
      CIDRAZb: 10.0.4.0/24

Resources:
############################################################################
# VPC
############################################################################
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default      
      Tags: 
        - Key: Name
          Value: !Ref 'AWS::StackName' # '!Ref' is a built in function. It references the VPC above. 'AWS::StackName' is Pseudo-Parameter. Its value is the one you give at creation time.

############################################################################ 
# Internet Gateway 
############################################################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment: 
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: 
      - VPC
      - InternetGateway    
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


############################################################################ 
# Elastic IP
############################################################################
  EIPAZa:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


############################################################################ 
# Public Subnet
############################################################################
  SubnetAZaPublic:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPublic, CIDRAZa ] # In 'Mappings' declared above, traverse thru Config.SubnetPublic.CIDRAZa
      MapPublicIpOnLaunch: true # Auto-assign public IP when an EC2 instance is launched in this public subnet
      AvailabilityZone: !Select [ 0, !GetAZs ''] #The intrinsic function 'GetAZs' returns an array that lists Availability Zones for a specified region, so grab the first Availability Zone (i.e. 0).
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AZa-public' # 'Sub' is a built in function to mean 'Substitute' 
        - Key: Network
          Value: Public

  SubnetAZaPrivate:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPrivate, CIDRAZa ] 
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AZa-private'
        - Key: Network
          Value: Private


############################################################################ 
# NAT Gateway
############################################################################
  NatGatewayAZa:
    Type: AWS::EC2::NatGateway  
    DependsOn: 
      - VPCGatewayAttachment
      - SubnetAZaPublic
      - EIPAZa
    Properties:
      AllocationId: !GetAtt EIPAZa.AllocationId # Allocate Elastic IP to NAT Gateways. NAT Gateway has a built in property called 'AllocationId'
      SubnetId: !Ref SubnetAZaPublic # Associate NAT gateway with public subnet.


############################################################################ 
# Public Route Table
############################################################################
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AZa-public'
        - Key: Network
          Value: Public

  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePublic 
      - InternetGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0 # Route out to the internet
      GatewayId: !Ref InternetGateway # Attach internet gateway to route table. Subnet is public if it's attached to internet gateway
  
# Associate Public subnets to Public Route table. 
  SubnetPublicRouteTableAssociationAZa:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetAZaPublic
      - RouteTablePublic          
    Properties:
      SubnetId: !Ref SubnetAZaPublic
      RouteTableId: !Ref RouteTablePublic


############################################################################ 
# Private Route Table
############################################################################  
  RouteTablePrivateAZa:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AZa-private'
        - Key: Network
          Value: Private
  
  RoutePrivate: 
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePrivateAZa 
      - NatGatewayAZa
    Properties:
      RouteTableId: !Ref RouteTablePrivateAZa
      DestinationCidrBlock: 0.0.0.0/0 # 0.0.0.0/0 enables EC2 instances in the private subnet to get yum updates from the internet via NAT Gateway.
      NatGatewayId: !Ref NatGatewayAZa 


# Associate Private subnets to Private Route tables. 
  SubnetRouteTableAssociationAZaPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetAZaPrivate
      - RouteTablePrivateAZa   
    Properties:
      SubnetId: !Ref SubnetAZaPrivate
      RouteTableId: !Ref RouteTablePrivateAZa



############################################################################ 
# Security Groups
############################################################################    
  SecurityGroupELB:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC 
    Properties:
      VpcId: !Ref VPC
      GroupDescription: For Classic ELB 
      SecurityGroupIngress: # Inbound
      - IpProtocol: tcp
        FromPort: '80' # http
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443' # https
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-elb'

  SecurityGroupSubnetPublic:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      GroupDescription: For Public Subnet 
      SecurityGroupIngress: # Inbound
      - IpProtocol: tcp
        FromPort: '80' #TCP
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22' # ssh
        ToPort: '22'
        CidrIp: 0.0.0.0/0             
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public'

  SecurityGroupSubnetPrivate:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
      - VPC
      - SecurityGroupELB
      - SecurityGroupSubnetPublic
    Properties:
      VpcId: !Ref VPC
      GroupDescription: For Private Subnet 
      SecurityGroupIngress: # Inbound
      - IpProtocol: tcp
        FromPort: '80' # http, https
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22' # ssh
        ToPort: '22'
        SourceSecurityGroupId: !Ref SecurityGroupSubnetPublic # Allow ssh only from public subnet bastion     
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private'

############################################################################ 
# Public Subnet EC2 Instance ssh bastion
############################################################################
  Ec2InstanceAZaPublic: 
    Type: AWS::EC2::Instance
    DependsOn:
      - SubnetAZaPublic
      - SecurityGroupSubnetPublic
      - RouteTablePublic # Dependency to ensure we have a public IP
    Properties: 
      ImageId: !FindInMap [ AWSRegionToAMI, amazon, AMIID ]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref SubnetAZaPublic        
      KeyName: ries_keypair
      SecurityGroupIds: 
        - !Ref SecurityGroupSubnetPublic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public'

############################################################################ 
# Private Subnet EC2 Instance Web Server
############################################################################
  Ec2InstanceAZaPrivate: 
    Type: AWS::EC2::Instance
    DependsOn:
      - SubnetAZaPrivate
      - SecurityGroupSubnetPrivate
      - RoutePrivate # We must have this dependency to ensure that we can get out onto the internet via NAT gatewayhave, so we could get yum updates.
    Properties: 
      ImageId: !FindInMap [ AWSRegionToAMI, amazon, AMIID ]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref SubnetAZaPrivate          
      KeyName: ries_keypair
      SecurityGroupIds: 
        - !Ref SecurityGroupSubnetPrivate
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private'        
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install httpd -y
          yum update -y
          service httpd start
          chkconfig httpd on
          echo "<html><h1>hello world Private Subnet AZa</h1></html>" > /var/www/html/index.html        


############################################################################ 
# Load Balancer Classic 
############################################################################
  ClassicLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn: 
      - Ec2InstanceAZaPrivate
      - SubnetAZaPublic
      - SecurityGroupELB
    Properties:
      Instances:
        - Ref: Ec2InstanceAZaPrivate
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      Subnets: 
        - !Ref SubnetAZaPublic
      SecurityGroups:
        - !Ref SecurityGroupELB        
      HealthCheck:
        Target:
          Fn::Join:
          - ''
          - - 'HTTP:80'
            - "/index.html"
        HealthyThreshold: '2' # Number of consecutive health probe successes required before moving the instance to the Healthy state
        UnhealthyThreshold: '10' #  number of consecutive health probe failures required before moving the instance to the Unhealthy state
        Interval: '30'
        Timeout: '5'


