# High Availability (HA) VPC 
#   2 Public Subnets
#   2 Private Subnets
#   1 Internet Gateway
#   2 Elastic IPs
#   2 NAT Gateways
#   1 Route Table for Public Subnets
#   2 Route Tables for each Private Subnets
#   1 Security Group for Public EC2 instances

# TODOs:
# - Additional Security groups for e.g. Private ECS instances
# - NACLs
# - Application Load Balancer
# - Autoscaling group
# - Route 53
# - IAM Profile and Roles
# - Public subnet EC2 Launch configuration
# - Private subnet EC2 Launch configuration
# - ECS Service
# - ECS Task Definition

# How to create CloudFormation Stack using AWS CLI:
# 1. Create S3 bucket: aws s3api create-bucket --bucket cloudformation-rdms --region ap-southeast-2
# 2. Upload this file to s3: aws s3 cp bastion.yaml s3://cloudformation-rdms/bastion.yaml
# 3. aws cloudformation create-stack --region us-west-2 --stack-name bastion-dev --template-url https://s3.amazonaws.com/cloudformation-rdms/bastion.yaml
#    or: aws cloudformation update-stack --region us-west-2 --stack-name bastion-dev --template-url https://s3.amazonaws.com/cloudformation-rdms/bastion.yaml
#    or: aws cloudformation delete-stack --region us-west-2 --stack-name bastion-dev
# 4. aws cloudformation describe-stacks --region us-west-2
# 5. aws cloudformation validate-template --template-body file://.\bastion.yaml

AWSTemplateFormatVersion: '2010-09-09'


Description: 'Bastion DEV Stack'


Parameters: 
  InstanceType: 
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano     
      - t2.micro
    Description: Enter t2.nano, t2.micro. Default is t2.micro.
    ConstraintDescription: Must be a valid EC2 instance type.    


Mappings:
  AWSRegionToAMI:
    us-west-2: # oregon
      AMIID: ami-56ed4936 #ECS AMI
    ap-southeast-2: #sydney
      AMIID: ami-73407d10 #ECS AMI
    amazon:
        AMIID: ami-5ec1673e  
  Config:
    SubnetPublic:
      CIDRAZa: 10.0.1.0/24
      CIDRAZb: 10.0.2.0/24      
    SubnetPrivate:
      CIDRAZa: 10.0.3.0/24      
      CIDRAZb: 10.0.4.0/24

Resources:
############################################################################
# 1 VPC
############################################################################
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default      
      Tags: 
        - Key: Name
          Value: !Ref 'AWS::StackName' # '!Ref' is a built in function. It references the VPC above. 'AWS::StackName' is Pseudo-Parameter. Its value is the one you give at creation time.

############################################################################ 
# 1 Internet Gateway 
############################################################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment: 
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: 
      - VPC
      - InternetGateway    
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


############################################################################ 
# 2 Elastic IPs
############################################################################
  # Create elastic IP, one for each AZs.
  EIPAZa:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


############################################################################ 
# 2 Public Subnets
############################################################################
  SubnetPublicAZa:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPublic, CIDRAZa ] # In 'Mappings' declared above, traverse thru Config.SubnetPublic.CIDRAZa
      MapPublicIpOnLaunch: true # Auto-assign public IP when an EC2 instance is launched in this public subnet
      AvailabilityZone: !Select [ 0, !GetAZs ''] #The intrinsic function 'GetAZs' returns an array that lists Availability Zones for a specified region, so grab the first Availability Zone (i.e. 0).
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-AZa' # 'Sub' is a built in function to mean 'Substitute' 
        - Key: Network
          Value: Public


############################################################################ 
# 2 Private Subnets
############################################################################

  SubnetPrivateAZb:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPrivate, CIDRAZb ]
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-AZb'
        - Key: Network
          Value: Private        

############################################################################ 
# 2 NAT Gateways
############################################################################
  # Create NAT gateways for each AZs
  NatGatewayAZa:
    Type: AWS::EC2::NatGateway  
    DependsOn: 
      - VPCGatewayAttachment
      - SubnetPublicAZa
      - EIPAZa
    Properties:
      AllocationId: !GetAtt EIPAZa.AllocationId # Allocate Elastic IP to NAT Gateways.
      SubnetId: !Ref SubnetPublicAZa # Associate NAT gateway with public subnet.

############################################################################ 
# 1 x Public Route Table
############################################################################
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public'
        - Key: Network
          Value: Public

  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePublic 
      - InternetGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0 # Route out to the internet
      GatewayId: !Ref InternetGateway # Attach internet gateway to route table. Subnet is public if it's attached to internet gateway 

# Associate Public subnets to Public Route table. 
  SubnetPublicRouteTableAssociationAZa:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPublicAZa
      - RouteTablePublic          
    Properties:
      SubnetId: !Ref SubnetPublicAZa
      RouteTableId: !Ref RouteTablePublic

############################################################################ 
# 2 Private Route Tables
############################################################################
  RouteTablePrivateAZb:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-AZb'
        - Key: Network
          Value: Private

  RouteToInternetAZb: 
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePrivateAZb 
      - NatGatewayAZa
    Properties:
      RouteTableId: !Ref RouteTablePrivateAZb
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayAZa      

# Associate Private subnets to Private Route tables. 
  SubnetRouteTableAssociationAZbPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPrivateAZb
      - RouteTablePrivateAZb          
    Properties:
      SubnetId: !Ref SubnetPrivateAZb
      RouteTableId: !Ref RouteTablePrivateAZb


############################################################################ 
# Security Group Public
############################################################################    
  SecurityGroupSubnetPublic:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC 
    Properties:
      VpcId: !Ref VPC
      GroupDescription: For Public Subnet 
      SecurityGroupIngress: # Inbound
      - IpProtocol: tcp
        FromPort: '22' #SSH
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0                
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public'

############################################################################ 
# Security Group Private
############################################################################
  SecurityGroupSubnetPrivate:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: For Private Subnet
      SecurityGroupIngress: # Inbound
        - IpProtocol: tcp
          FromPort: '22' # SSH from Public AZa
          ToPort: '22'
          CidrIp: !FindInMap [ Config, SubnetPublic, CIDRAZa ] #Allow ssh only from public subnet AZa ip addresses
        - IpProtocol: icmp # allows me to ping this from public subnet
          FromPort: '-1' # All ports
          ToPort: '-1'
          CidrIp: !FindInMap [ Config, SubnetPublic, CIDRAZa ] #Allow ping only from public subnet AZa ip addresses
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private'


############################################################################ 
# EC2 Instance
############################################################################
  Ec2InstancePublicAZa: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap [ AWSRegionToAMI, amazon, AMIID ]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref SubnetPublicAZa            
      KeyName: ries_keypair
      SecurityGroupIds: 
        - !Ref SecurityGroupSubnetPublic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public'        
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install httpd -y
          yum update -y
          service httpd start
          chkconfig httpd on
          echo "<html><h1>hello</h1></html>" > /var/www/html/index.html        

  Ec2InstancePublicAZb: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap [ AWSRegionToAMI, amazon, AMIID ]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref SubnetPrivateAZb            
      KeyName: ries_keypair
      SecurityGroupIds: 
        - !Ref SecurityGroupSubnetPrivate
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private'        
