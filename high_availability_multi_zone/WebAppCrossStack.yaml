AWSTemplateFormatVersion: '2010-09-09'

# aws s3 cp WebAppCrossStack.yaml s3://ariesmcrae-cloudformation/WebAppCrossStack.template --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers --content-type 'text/plain'

# aws cloudformation create-stack --region us-west-2 --stack-name mywebapp-dev --template-url https://s3.amazonaws.com/ariesmcrae-cloudformation/WebAppCrossStack.template

# aws cloudformation update-stack --region us-west-2 --stack-name mywebapp-dev --template-url https://s3.amazonaws.com/ariesmcrae-cloudformation/WebAppCrossStack.template

Description: 'WebAppCrossStack'

Parameters: 
  NetworkStackName: 
    Type: String
    Default: 'myproject-dev'   
    Description: The Network Stack name.
  InstanceType: 
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano     
      - t2.micro
    Description: 'Enter t2.nano, t2.micro. Default is t2.micro.'
    ConstraintDescription: Must be a valid EC2 instance type.


Mappings:
  AWSRegionToAMI:
    us-west-2: # oregon
      AMIID: ami-56ed4936 #ECS AMI
    ap-southeast-2: #sydney
      AMIID: ami-73407d10 #ECS AMI
    amazon:
        AMIID: ami-5ec1673e


Resources:
  ############################################################################ 
  # Public Subnet EC2 Instance ssh bastion
  ############################################################################
  Ec2InstanceAZaPublic: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap [ AWSRegionToAMI, amazon, AMIID ]
      InstanceType: !Ref InstanceType
      SubnetId: 
        'Fn::ImportValue': !Sub '${NetworkStackName}-SubnetAZaPublicId'
      KeyName: ries_keypair
      SecurityGroupIds: 
        - 'Fn::ImportValue': !Sub '${NetworkStackName}-SecurityGroupPublicInstanceId'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AZa-public'


  Ec2InstanceAZbPublic: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap [ AWSRegionToAMI, amazon, AMIID ]
      InstanceType: !Ref InstanceType
      SubnetId: 
        'Fn::ImportValue': !Sub '${NetworkStackName}-SubnetAZbPublicId'
      KeyName: ries_keypair
      SecurityGroupIds: 
        - 'Fn::ImportValue': !Sub '${NetworkStackName}-SecurityGroupPublicInstanceId'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AZb-public'


  ############################################################################ 
  # Private Subnet EC2 Instance Web Server
  ############################################################################
  Ec2InstanceAZaPrivate: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap [ AWSRegionToAMI, amazon, AMIID ]
      InstanceType: !Ref InstanceType
      SubnetId: 
        'Fn::ImportValue': !Sub '${NetworkStackName}-SubnetAZaPrivateId'          
      KeyName: ries_keypair
      SecurityGroupIds: 
        - 'Fn::ImportValue': !Sub '${NetworkStackName}-SecurityGroupPrivateInstanceId'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AZa-private'        
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install httpd -y
          yum update -y
          service httpd start
          chkconfig httpd on
          echo "<html><h1>hello world Private Subnet AZa</h1></html>" > /var/www/html/index.html 


  Ec2InstanceAZbPrivate: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !FindInMap [ AWSRegionToAMI, amazon, AMIID ]
      InstanceType: !Ref InstanceType
      SubnetId: 
        'Fn::ImportValue': !Sub '${NetworkStackName}-SubnetAZbPrivateId'          
      KeyName: ries_keypair
      SecurityGroupIds: 
        - 'Fn::ImportValue': !Sub '${NetworkStackName}-SecurityGroupPrivateInstanceId'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AZb-private'        
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install httpd -y
          yum update -y
          service httpd start
          chkconfig httpd on
          echo "<html><h1>hello world Private Subnet AZb</h1></html>" > /var/www/html/index.html


  # ############################################################################ 
  # Application Load Balancer Target Group
  # ############################################################################
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - Ec2InstanceAZaPrivate
      - Ec2InstanceAZbPrivate
    Properties:
      HealthCheckIntervalSeconds: 30 # Seconds between health checks of an individual target.
      HealthCheckProtocol: HTTP
      HealthCheckPath: /index.html      
      HealthCheckTimeoutSeconds: 10 # Number of seconds during which no response means a failed health check.
      HealthyThresholdCount: 5 # The number of consecutive health check success required before considering an unhealthy target healthy.
      UnhealthyThresholdCount: 2 # The number of consecutive health check failures required before considering a target unhealthy      
      Matcher:
        HttpCode: '200'
      Name: !Ref 'AWS::StackName'
      Protocol: HTTP
      Port: 80
      Targets:
      - Id: !Ref Ec2InstanceAZaPrivate
        Port: 80
      - Id: !Ref Ec2InstanceAZbPrivate
        Port: 80
      VpcId:
        'Fn::ImportValue': !Sub '${NetworkStackName}-VpcId'
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'


  ############################################################################ 
  # # Application Load Balancer
  # ############################################################################
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - 'Fn::ImportValue': !Sub '${NetworkStackName}-SubnetAZaPublicId'
        - 'Fn::ImportValue': !Sub '${NetworkStackName}-SubnetAZbPublicId'     
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${NetworkStackName}-SecurityGroupELBId'
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'


  ############################################################################ 
  # Application Load Balancer Listener
  # ############################################################################
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
      - ApplicationLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP


############################################################################ 
# Outputs
############################################################################
Outputs:
  BaseUrl:
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}
    Description: ApplicationLoadBalancer URL


 

