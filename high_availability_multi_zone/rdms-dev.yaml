AWSTemplateFormatVersion: '2010-09-09'


Description: 'blah blah'


Parameters:
  InstanceType:
    AllowedValues:
    - t1.micro
    - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro`
    Description: blha blah
    Type: String
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName


Mappings: 
  RegionMap: 
    ap-southeast-2: # Sydney
      "64": "ami-73407d10" # amzn-ami-2016.09.a-amazon-ecs-optimized
	  us-east-2: # Ohio
      "64": "ami-bd3e64d8" # amzn-ami-2016.09.a-amazon-ecs-optimized         


Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default      
      Tags: 
      - Key: Name
        Value: rdms-dev-vpc-ap-southeast-2

  SubnetPublic:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "ap-southeast-2a"
      Tags:
      - Key: Name
        Value: rdms-dev-subnet-public-2a

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: rdms-dev-internet-gateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: 
      - VPC
      - InternetGateway    
    Properties:
    VpcId:
      Ref: VPC
    InternetGatewayId:
      Ref: InternetGateway  

  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: rdms-dev-routetable

  Route:
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTable 
      - InternetGateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway              

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPublic
      - RouteTable          
    Properties:
      SubnetId:
        Ref: SubnetPublic
      RouteTableId:
        Ref: RouteTable

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC    
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: rdms-dev-NetworkAcl

  HTTPNetworkAclEntryInbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl    
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: "-1" # -1 All, 6 TPC
      RuleAction: allow # or deny
      Egress: 'false' # true: traffic from subnet. false: traffic into subnet
      CidrBlock: 0.0.0.0/0 # CIDR range to allow or deny

  HTTPNetworkAclEntryOutbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl    
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: "-1" # -1 All, 6 TPC
      RuleAction: allow # or deny
      Egress: 'true' # true: egress traffic from subnet. false: traffic to subnet
      CidrBlock: 0.0.0.0/0 # CIDR range to allow or deny

  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - SubnetPublic
      - NetworkAcl    
    Properties:
      SubnetId:
        Ref: SubnetPublic
      NetworkAclId:
        Ref: NetworkAcl

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC    
    Properties:
      GroupDescription: Allows inbound http, https, ssh
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0        
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0

  Cluster:
    Type: "AWS::ECS::Cluster"
    DependsOn: VPC    
    Properties:
      ClusterName: rdms-dev-cluster 

  Taskdefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        ContainerDefinitions:
        - Name: nginx
          Cpu: '102'
          Memory: '50'          
          Essential: 'true'
          Image: 301003317249.dkr.ecr.ap-southeast-2.amazonaws.com/ariesmcrae/nginx:1.11.5-alpine
          PortMappings:
          - HostPort: 80
            ContainerPort: 80

  Service:
    Type: AWS::ECS::Service
    DependsOn:
    - VPC
    - Cluster
    - Taskdefinition
    Properties:
      Cluster:
        Ref: Cluster
      DesiredCount: '1'
      TaskDefinition:
        Ref: Taskdefinition