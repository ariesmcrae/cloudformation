AWSTemplateFormatVersion: '2010-09-09'


Description: 'RDMS DEV Stack'

# aws s3 cp rdms.yaml s3://cloudformation-rdms/rdms.yaml

# aws cloudformation create-stack --region us-west-2 --stack-name rdms-dev --template-url https://s3.amazonaws.com/cloudformation-rdms/rdms.yaml

# aws cloudformation update-stack --region us-west-2 --stack-name rdms-dev --template-url https://s3.amazonaws.com/cloudformation-rdms/rdms.yaml

# aws cloudformation delete-stack --region us-west-2 --stack-name rdms-dev

# aws cloudformation describe-stacks --region us-west-2


Parameters: 
  InstanceTypeParameter: 
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano     
      - t2.micro
    Description: Enter t2.nano, t2.micro. Default is t2.micro.
    ConstraintDescription: Must be a valid EC2 instance type.    


Mappings:
  Config:
    VPC:
      CIDR: 10.0.0.0/16
    SubnetPublic:
      CIDR: 10.0.0.0/24
    SubnetPrivate:
      CIDR: 10.0.1.0/24      


Resources:
  VPC: #VPC alone will create a new Route Table, NACL, Security Group
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ Config, VPC, CIDR ]
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default      
      Tags: 
      - Key: Name
        Value: rdms-dev

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: rdms-dev

  VPCGatewayAttachment: # Attach Internet Gateway to VPC
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: 
      - VPC
      - InternetGateway    
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetPublicAZ1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPublic, CIDR ] # In 'Mappings' declared above, traverse to Config.SubnetPublic.CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ''] #The intrinsic function GetAZs returns an array that lists Availability Zones for a specified region
      Tags:
      - Key: Name
        Value: rdms-dev-public-az1      
      - Key: Network
        Value: Public

  SubnetPrivateAZ2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPrivate, CIDR ]
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
      - Key: Name
        Value: rdms-dev-private-az2      
      - Key: Network
        Value: Private

  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: rdms-dev

  Route:
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTable 
      - InternetGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPublicAZ1
      - RouteTable          
    Properties:
      SubnetId: !Ref SubnetPublicAZ1
      RouteTableId: !Ref RouteTable

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: rdms-dev      

  NetworkAclEntryHTTPInbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl    
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6' # -1 All, 6 TCP
      RuleAction: allow # or deny
      Egress: 'false' # true: traffic from subnet to outside. false: traffic from outside into subnet
      CidrBlock: 0.0.0.0/0 # CIDR range to allow or deny
      PortRange:
        From: '80' # http
        To: '80'      

  NetworkAclEntryHTTPSInbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl    
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443' # https
        To: '443'

  NetworkAclEntrySSHInbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl    
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '300'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22' # ssh
        To: '22'        

  NetworkAclEntryOutbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAcl    
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true' # true: egress traffic from subnet to the outside world.
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '-1'
        To: '-1'                

  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - SubnetPublicAZ1
      - NetworkAcl    
    Properties:
      SubnetId: !Ref SubnetPublicAZ1
      NetworkAclId: !Ref NetworkAcl

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC    
    Properties:
      GroupDescription: Allows inbound http, https, ssh
      VpcId: !Ref VPC
      SecurityGroupIngress: # Inbound
      - IpProtocol: tcp
        FromPort: '80' # http
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443' # https
        ToPort: '443'
        CidrIp: 0.0.0.0/0        
      - IpProtocol: tcp
        FromPort: '22' # ssh
        ToPort: '22'
        CidrIp: 0.0.0.0/0        
      SecurityGroupEgress: # Outbound
      - IpProtocol: '-1' # ALL
        CidrIp: 0.0.0.0/0     
      Tags:
      - Key: Name
        Value: rdms-dev



# These outputs will be shown when you do: aws cloudformation describe-stacks --region us-west-2
Outputs:
  StacksRegion:
    Value: !Ref 'AWS::Region'


