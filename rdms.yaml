# High Availability (HA) VPC 
#   2 Public Subnets
#   2 Private Subnets
#   1 Internet Gateway
#   2 Elastic IPs
#   2 NAT Gateways
#   1 Route Table for Public Subnets
#   2 Route Tables for each Private Subnets
#   1 Security Group for Public EC2 instances

# TODOs:
# - Additional Security groups for e.g. Private ECS instances
# - NACLs
# - Application Load Balancer
# - Autoscaling group
# - Route 53
# - IAM Profile and Roles
# - Public subnet EC2 Launch configuration
# - Private subnet EC2 Launch configuration
# - ECS Service
# - ECS Task Definition

# How to create CloudFormation Stack using AWS CLI:
# 1. Create S3 bucket: aws s3api create-bucket --bucket cloudformation-rdms --region ap-southeast-2
# 2. Upload this file to s3: aws s3 cp rdms.yaml s3://cloudformation-rdms/rdms.yaml
# 3. aws cloudformation create-stack --region us-west-2 --stack-name rdms-dev --template-url https://s3.amazonaws.com/cloudformation-rdms/rdms.yaml
#    or: aws cloudformation update-stack --region us-west-2 --stack-name rdms-dev --template-url https://s3.amazonaws.com/cloudformation-rdms/rdms.yaml
#    or: aws cloudformation delete-stack --region us-west-2 --stack-name rdms-dev
# 4. aws cloudformation describe-stacks --region us-west-2


AWSTemplateFormatVersion: '2010-09-09'


Description: 'RDMS DEV Stack'


Parameters: 
  InstanceType: 
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano     
      - t2.micro
    Description: Enter t2.nano, t2.micro. Default is t2.micro.
    ConstraintDescription: Must be a valid EC2 instance type.    


Mappings:
  AWSRegionToAMI:
    us-west-2: # oregon
      AMIID: ami-56ed4936 #ECS AMI
    ap-southeast-2: #sydney
      AMIID: ami-73407d10 #ECS AMI
  Config:
    SubnetPublic:
      CIDRAZa: 10.0.1.0/24
      CIDRAZb: 10.0.2.0/24      
    SubnetPrivate:
      CIDRAZa: 10.0.3.0/24      
      CIDRAZb: 10.0.4.0/24

Resources:
############################################################################
# 1 VPC
############################################################################
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default      
      Tags: 
      - Key: Name
        Value: !Ref "AWS::StackName" # '!Ref' is a built in function. It references the VPC above. 'AWS::StackName' is Pseudo-Parameter. Its value is the one you give at creation time.

############################################################################ 
# 1 Internet Gateway 
############################################################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment: 
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: 
      - VPC
      - InternetGateway    
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


############################################################################ 
# 2 Elastic IPs
############################################################################
  # Create elastic IP, one for each AZs.
  EIPAZa:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPAZb:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


############################################################################ 
# 2 Public Subnets
############################################################################
  SubnetPublicAZa:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPublic, CIDRAZa ] # In 'Mappings' declared above, traverse thru Config.SubnetPublic.CIDRAZa
      MapPublicIpOnLaunch: true # Auto-assign public IP when an EC2 instance is launched in this public subnet
      AvailabilityZone: !Select [ 0, !GetAZs ''] #The intrinsic function 'GetAZs' returns an array that lists Availability Zones for a specified region, so grab the first Availability Zone (i.e. 0).
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public-AZa' # 'Sub' is a built in function to mean 'Substitute' 
      - Key: Network
        Value: Public

  SubnetPublicAZb:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPublic, CIDRAZb ]
      MapPublicIpOnLaunch: true 
      AvailabilityZone: !Select [ 1, !GetAZs ''] 
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public-AZb'     
      - Key: Network
        Value: Public

############################################################################ 
# 2 Private Subnets
############################################################################
  SubnetPrivateAZa:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPrivate, CIDRAZa ]
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-private-AZa'
      - Key: Network
        Value: Private

  SubnetPrivateAZb:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPrivate, CIDRAZb ]
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-private-AZb'
      - Key: Network
        Value: Private        


############################################################################ 
# 2 NAT Gateways
############################################################################
  # Create NAT gateways for each AZs
  NatGatewayAZa:
    Type: AWS::EC2::NatGateway  
    DependsOn: 
      - VPCGatewayAttachment
      - SubnetPublicAZa
      - EIPAZa
    Properties:
      AllocationId: !GetAtt EIPAZa.AllocationId # Allocate Elastic IP to NAT Gateways. NAT Gateway has a built in property called 'AllocationId'
      SubnetId: !Ref SubnetPublicAZa # Associate NAT gateway with public subnet.

  NatGatewayAZb:
    Type: AWS::EC2::NatGateway  
    DependsOn: 
      - VPCGatewayAttachment
      - SubnetPublicAZb
      - EIPAZb
    Properties:
      AllocationId: !GetAtt EIPAZb.AllocationId # Allocate Elastic IP to NAT Gateways.
      SubnetId: !Ref SubnetPublicAZb # Associate NAT gateway with public subnet.


############################################################################ 
# 1 x Public Route Table
############################################################################
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public'
      - Key: Network
        Value: Public

  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePublic 
      - InternetGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0 # Route out to the internet
      GatewayId: !Ref InternetGateway # Attach internet gateway to route table. Subnet is public if it's attached to internet gateway 

# Associate Public subnets to Public Route table. 
  SubnetPublicRouteTableAssociationAZa:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPublicAZa
      - RouteTablePublic          
    Properties:
      SubnetId: !Ref SubnetPublicAZa
      RouteTableId: !Ref RouteTablePublic

  SubnetPublicRouteTableAssociationAZb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPublicAZb
      - RouteTablePublic          
    Properties:
      SubnetId: !Ref SubnetPublicAZb
      RouteTableId: !Ref RouteTablePublic

############################################################################ 
# 2 Private Route Tables
############################################################################
  RouteTablePrivateAZa:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-private-AZa'
      - Key: Network
        Value: Private
  
  RouteToInternetAZa: 
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePrivateAZa 
      - NatGatewayAZa
    Properties:
      RouteTableId: !Ref RouteTablePrivateAZa
      DestinationCidrBlock: 0.0.0.0/0
      # Add 0.0.0.0/0 route to Private Route Table. 
      # This enables private subnet to get out onto the internet via NAT Gateway. 
      # EC2 in Private subnets need internet access so they can access the internet e.g. to get yum updates. 
      NatGatewayId: !Ref NatGatewayAZa 


  RouteTablePrivateAZb:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-private-AZb'
      - Key: Network
        Value: Private

  RouteToInternetAZb: 
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePrivateAZb 
      - NatGatewayAZb
    Properties:
      RouteTableId: !Ref RouteTablePrivateAZb
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayAZb      

# Associate Private subnets to Private Route tables. 
  SubnetRouteTableAssociationAZaPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPrivateAZa
      - RouteTablePrivateAZa   
    Properties:
      SubnetId: !Ref SubnetPrivateAZa
      RouteTableId: !Ref RouteTablePrivateAZa

  SubnetRouteTableAssociationAZbPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPrivateAZb
      - RouteTablePrivateAZb          
    Properties:
      SubnetId: !Ref SubnetPrivateAZb
      RouteTableId: !Ref RouteTablePrivateAZb


############################################################################ 
# NACL for Public Subnet
############################################################################
  NACLPublic:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public'

  NACLPublicInbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NACLPublic    
    Properties:
      NetworkAclId:
        Ref: NACLPublic
      RuleNumber: '100'
      Protocol: '6' # -1 All, 6 TPC
      RuleAction: allow # or deny
      Egress: 'false' # false: traffic into this subnet
      CidrBlock: 0.0.0.0/0 # Incoming from anywhere
      PortRange:
        From: '22' #ssh
        To: '22'      

  NACLPublicOutbound:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NACLPublic    
    Properties:
      NetworkAclId:
        Ref: NACLPublic
      RuleNumber: '100'
      Protocol: '6' # -1 All, 6 TPC
      RuleAction: allow # or deny
      Egress: 'true' # true: traffic from subnet.
      CidrBlock: 0.0.0.0/0 # Incoming from anywhere
      PortRange:
        From: '0'
        To: '65535'


  NACLPublicSubnetAssocAZa:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - SubnetPublicAZa
      - NACLPublic    
    Properties:
      SubnetId:
        Ref: SubnetPublicAZa
      NetworkAclId:
        Ref: NACLPublic

  NACLPublicSubnetAssocAZb:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - SubnetPublicAZb
      - NACLPublic    
    Properties:
      SubnetId:
        Ref: SubnetPublicAZb
      NetworkAclId:
        Ref: NACLPublic        

############################################################################ 
# NACL for Private Subnet
############################################################################
  NACLPrivate:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-private'

  NACLPrivateInboundSSHAZa:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NACLPrivate
    Properties:
      NetworkAclId:
        Ref: NACLPrivate
      RuleNumber: '100'
      Protocol: '6' # 6 TPC
      RuleAction: allow 
      Egress: 'false' # false: traffic into this subnet
      CidrBlock: !FindInMap [ Config, SubnetPublic, CIDRAZa ] # from within public subnet AZa
      PortRange:
        From: '22' #ssh
        To: '22'

  NACLPrivateInboundSSHAZb:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NACLPrivate
    Properties:
      NetworkAclId:
        Ref: NACLPrivate
      RuleNumber: '200'
      Protocol: '6' 
      RuleAction: allow # or deny
      Egress: 'false' # false: traffic into this subnet
      CidrBlock: !FindInMap [ Config, SubnetPublic, CIDRAZb ] # from within public subnet AZa
      PortRange:
        From: '22' #ssh
        To: '22'

  NACLPrivateInboundALB:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NACLPrivate
    Properties:
      NetworkAclId:
        Ref: NACLPrivate
      RuleNumber: '300'
      Protocol: '6' 
      RuleAction: allow 
      Egress: 'false' # false: traffic into this subnet
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024' #ssh
        To: '65535'

  NACLPrivateOutboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NACLPrivate    
    Properties:
      NetworkAclId:
        Ref: NACLPrivate
      RuleNumber: '100'
      Protocol: '6' 
      RuleAction: allow 
      Egress: 'true' # true: traffic from subnet.
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  NACLPrivateOutboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NACLPrivate    
    Properties:
      NetworkAclId:
        Ref: NACLPrivate
      RuleNumber: '200'
      Protocol: '6' 
      RuleAction: allow 
      Egress: 'true' # true: traffic from subnet.
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'              

  NACLPrivateOutboundAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NACLPrivate    
    Properties:
      NetworkAclId:
        Ref: NACLPrivate
      RuleNumber: '300'
      Protocol: '6' 
      RuleAction: allow 
      Egress: 'true' # true: traffic from subnet.
      CidrBlock: 10.0.0.0/24
      PortRange:
        From: '1024'
        To: '65535'

  NACLPrivateSubnetAssocAZa:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - SubnetPrivateAZa
      - NACLPrivate    
    Properties:
      SubnetId:
        Ref: SubnetPrivateAZa
      NetworkAclId:
        Ref: NACLPrivate

  NACLPrivateSubnetAssocAZb:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - SubnetPrivateAZb
      - NACLPrivate    
    Properties:
      SubnetId:
        Ref: SubnetPrivateAZb
      NetworkAclId:
        Ref: NACLPrivate


############################################################################ 
# Security groups
############################################################################
  SecurityGroupSubnetPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: For Public Subnet 
      SecurityGroupIngress: # Inbound
      - IpProtocol: tcp
        FromPort: '22' #SSH
        ToPort: '22'
        CidrIp: 0.0.0.0/0        
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0        
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public'

  SecurityGroupSubnetPrivate:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: For Private Subnet
      SecurityGroupIngress: # Inbound
      - IpProtocol: tcp
        FromPort: '22' # SSH from Public AZa
        ToPort: '22'
        CidrIp: !FindInMap [ Config, SubnetPublic, CIDRAZa ]
      - IpProtocol: tcp
        FromPort: '22' # SSH from Public AZb
        ToPort: '22'
        CidrIp: !FindInMap [ Config, SubnetPublic, CIDRAZb ]        
      - IpProtocol: tcp
        FromPort: '1024' # From load balancer
        ToPort: '65535'
        CidrIp: 0.0.0.0/0        
      SecurityGroupEgress: # Outbound
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '1024'
          ToPort: '65535'
          CidrIp: 10.0.0.0/24                    
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-private'



############################################################################ 
# ECS
############################################################################  
  Cluster:
    Type: "AWS::ECS::Cluster"
    DependsOn: VPC    
    Properties:
      ClusterName: !Ref "AWS::StackName"




############################################################################ 
# TODOs
############################################################################




############################################################################ 
# Output:
# These outputs will be shown when you perform the command:
# aws cloudformation describe-stacks --region us-west-2
############################################################################
Outputs:
  StackRegion:
    Value: !Ref 'AWS::Region'
  Cluster:
    Description: ECS cluster
    Value: !Ref Cluster
  
  #BaseUrl:
  #  Description: ELB URL
  #  Value: !Sub http://${EcsElb.DNSName}

  #Public IP
  #Value: !Ref ElasticIP 


# Intrinsic functions FindInMap, GetAtt, GetAZs, Join, Select, Sub, Ref
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html
# !Join [ delimiter, [ comma-delimited list of values ] ]

# Pseudo parameters: AccountId, NotificationARNs, NoValue, Region, StackId, StackName
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html

#!Sub '${AWS::StackName}:VPC' is the same as !Join [ ':', [ !Ref 'AWS::StackName', VPC ] ]