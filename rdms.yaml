# High Availability VPC 
#   -2 Public and 2 Private Subnets
AWSTemplateFormatVersion: '2010-09-09'


Description: 'rdms stack'

# aws s3 cp rdms.yaml s3://cloudformation-rdms/rdms.yaml

# aws cloudformation create-stack --region us-west-2 --stack-name rdms-dev --template-url https://s3.amazonaws.com/cloudformation-rdms/rdms.yaml

# aws cloudformation update-stack --region us-west-2 --stack-name rdms-dev --template-url https://s3.amazonaws.com/cloudformation-rdms/rdms.yaml

# aws cloudformation delete-stack --region us-west-2 --stack-name rdms-dev

# aws cloudformation describe-stacks --region us-west-2


Parameters: 
  InstanceTypeParameter: 
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano     
      - t2.micro
    Description: Enter t2.nano, t2.micro. Default is t2.micro.
    ConstraintDescription: Must be a valid EC2 instance type.    


Mappings:
  Config:
    VPC:
      CIDR: 10.0.0.0/16
    SubnetPublic:
      CIDRAZa: 10.0.1.0/24
      CIDRAZb: 10.0.2.0/24      
    SubnetPrivate:
      CIDRAZa: 10.0.3.0/24      
      CIDRAZb: 10.0.4.0/24

Resources:
############################################################################ 
# VPC
# Note: Creating a VPC will automaticaly create a new Route Table, NACL, Security Group by default.
############################################################################
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ Config, VPC, CIDR ] # In 'Mappings' declared above, traverse to Config.VPC.CIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default      
      Tags: 
      - Key: Name
        Value: !Ref "AWS::StackName" # Pseudo-Parameter e.g. value=rdms-dev

############################################################################ 
# Internet Gateway
############################################################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment: 
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: 
      - VPC
      - InternetGateway    
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


############################################################################ 
# Elastic IP
############################################################################
  # Create elastic IP, one for each AZs.
  EIPAZa:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPAZb:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


############################################################################ 
# Public Subnets
############################################################################

# Create 2 Public Subnets 
  SubnetPublicAZa:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPublic, CIDRAZa ] 
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ''] #The intrinsic function 'GetAZs'' returns an array that lists Availability Zones for a specified region, so grab the first one (i.e. 0).
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public-AZa'      
      - Key: Network
        Value: Public

  SubnetPublicAZb:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPublic, CIDRAZb ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ''] 
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public-AZb'     
      - Key: Network
        Value: Public

############################################################################ 
# Private Subnets
############################################################################

# Create 2 Private Subnets
  SubnetPrivateAZa:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPrivate, CIDRAZa ]
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-private-AZa'
      - Key: Network
        Value: Private

  SubnetPrivateAZb:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPrivate, CIDRAZb ]
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-private-AZb'
      - Key: Network
        Value: Private        


############################################################################ 
# NAT Gateways
############################################################################
  # Create NAT gateways for each AZs
  NatGatewayAZa:
    Type: AWS::EC2::NatGateway  
    DependsOn: 
      - VPCGatewayAttachment
      - SubnetPublicAZa
      - EIPAZa
    Properties:
      AllocationId: !GetAtt EIPAZa.AllocationId # Allocate Elastic IP to NAT Gateways.
      SubnetId:
        Ref: SubnetPublicAZa # Associate NAT gateway with public subnet.

  NatGatewayAZb:
    Type: AWS::EC2::NatGateway  
    DependsOn: 
      - VPCGatewayAttachment
      - SubnetPublicAZb
      - EIPAZb
    Properties:
      AllocationId: !GetAtt EIPAZb.AllocationId # Allocate Elastic IP to NAT Gateways.
      SubnetId:
        Ref: SubnetPublicAZb # Associate NAT gateway with public subnet.


############################################################################ 
# Public Route Tables
############################################################################
# Create Public Route table. 
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public'
      - Key: Network
        Value: Public

  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePublic 
      - InternetGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway # Attach internet gateway to route table. Subnet is public if it's attached to internet gateway 

# Associate Public subnets to Public Route table. 
  SubnetPublicRouteTableAssociationAZa:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPublicAZa
      - RouteTablePublic          
    Properties:
      SubnetId: !Ref SubnetPublicAZa
      RouteTableId: !Ref RouteTablePublic

  SubnetPublicRouteTableAssociationAZb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPublicAZb
      - RouteTablePublic          
    Properties:
      SubnetId: !Ref SubnetPublicAZb
      RouteTableId: !Ref RouteTablePublic

############################################################################ 
# Private Route Tables
############################################################################
# Create Private Route table.
  RouteTablePrivateAZa:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-private-AZa'
      - Key: Network
        Value: Private
  
  RouteToInternetAZa: 
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePrivateAZa 
      - NatGatewayAZa
    Properties:
      RouteTableId: !Ref RouteTablePrivateAZa
      DestinationCidrBlock: 0.0.0.0/0
      # Add 0.0.0.0/0 route to Private Route Table. 
      # This enables private subnet to get out onto the internet via NAT Gateway. 
      # EC2 in Private subnets need internet access so they can access the internet e.g. to get yum updates. 
      NatGatewayId: !Ref NatGatewayAZa 


  RouteTablePrivateAZb:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-private-AZb'
      - Key: Network
        Value: Private

  RouteToInternetAZb: 
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePrivateAZb 
      - NatGatewayAZb
    Properties:
      RouteTableId: !Ref RouteTablePrivateAZb
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayAZb      

# Associate Private subnets to Private Route tables. 
  SubnetRouteTableAssociationAZaPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPrivateAZa
      - RouteTablePrivateAZa   
    Properties:
      SubnetId: !Ref SubnetPrivateAZa
      RouteTableId: !Ref RouteTablePrivateAZa

  SubnetRouteTableAssociationAZbPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPrivateAZb
      - RouteTablePrivateAZb          
    Properties:
      SubnetId: !Ref SubnetPrivateAZb
      RouteTableId: !Ref RouteTablePrivateAZb




########### ECS ###########################  
  Cluster:
    Type: "AWS::ECS::Cluster"
    DependsOn: VPC    
    Properties:
      ClusterName: !Ref "AWS::StackName"




# These outputs will be shown when you perform the command
# aws cloudformation describe-stacks --region us-west-2
Outputs:
  StackRegion:
    Value: !Ref 'AWS::Region'

#Value: !Join [ "http://", [ !GetAtt EC2Instance.PrivateIp] ]    
#	Value: !Ref: ElasticIP #SSH bastion host public ip address
#!Sub '${AWS::StackName}:VPC' is the same as !Join [ ':', [ !Ref 'AWS::StackName', VPC ] ]


# Intrinsic functions FindInMap, GetAtt, GetAZs, Join, Select, Sub, Ref
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html
# !Join [ delimiter, [ comma-delimited list of values ] ]

# Pseudo parameters: AccountId, NotificationARNs, NoValue, Region, StackId, StackName
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html