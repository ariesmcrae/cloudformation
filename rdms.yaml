# High Availability VPC 
#   -2 Public and 2 Private Subnets
AWSTemplateFormatVersion: '2010-09-09'


Description: 'RDMS DEV Stack'

# aws s3 cp rdms.yaml s3://cloudformation-rdms/rdms.yaml

# aws cloudformation create-stack --region us-west-2 --stack-name rdms-dev --template-url https://s3.amazonaws.com/cloudformation-rdms/rdms.yaml

# aws cloudformation update-stack --region us-west-2 --stack-name rdms-dev --template-url https://s3.amazonaws.com/cloudformation-rdms/rdms.yaml

# aws cloudformation delete-stack --region us-west-2 --stack-name rdms-dev

# aws cloudformation describe-stacks --region us-west-2


Parameters: 
  InstanceTypeParameter: 
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano     
      - t2.micro
    Description: Enter t2.nano, t2.micro. Default is t2.micro.
    ConstraintDescription: Must be a valid EC2 instance type.    


Mappings:
  Config:
    VPC:
      CIDR: 10.0.0.0/16
    SubnetPublic:
      CIDRAZ1: 10.0.1.0/24
      CIDRAZ2: 10.0.2.0/24      
    SubnetPrivate:
      CIDRAZ1: 10.0.3.0/24      
      CIDRAZ2: 10.0.4.0/24

Resources:
  VPC: # Creating a VPC alone will automaticaly create a new Route Table, NACL, Security Group by default
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ Config, VPC, CIDR ]
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default      
      Tags: 
      - Key: Name
        Value: !Ref "AWS::StackName" # Pseudo-Parameter e.g. value=rdms-dev

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"

  VPCGatewayAttachment: # Attach Internet Gateway to VPC
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: 
      - VPC
      - InternetGateway    
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# Create 2 Public Subnets 
  SubnetPublicAZ1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPublic, CIDRAZ1 ] # In 'Mappings' declared above, traverse to Config.SubnetPublic.CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ''] #The intrinsic function GetAZs returns an array that lists Availability Zones for a specified region
      Tags:
      - Key: Name
        Value: rdms-dev-public-az1      
      - Key: Network
        Value: Public

  SubnetPublicAZ2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPublic, CIDRAZ2 ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ''] 
      Tags:
      - Key: Name
        Value: rdms-dev-public-az2     
      - Key: Network
        Value: Public

# Create 2 Private Subnets
  SubnetPrivateAZ1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPrivate, CIDRAZ1 ]
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
      - Key: Name
        Value: rdms-dev-private-az1
      - Key: Network
        Value: Private

  SubnetPrivateAZ2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ Config, SubnetPrivate, CIDRAZ2 ]
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
      - Key: Name
        Value: rdms-dev-private-az2
      - Key: Network
        Value: Private        

# Make Subnet public by creating a route table and adding internet gateway
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC    
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: rdms-dev-public
      - Key: Network
        Value: Public

  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePublic 
      - InternetGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetPublicRouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPublicAZ1
      - RouteTablePublic          
    Properties:
      SubnetId: !Ref SubnetPublicAZ1
      RouteTableId: !Ref RouteTablePublic

  SubnetPublicRouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SubnetPublicAZ2
      - RouteTablePublic          
    Properties:
      SubnetId: !Ref SubnetPublicAZ2
      RouteTableId: !Ref RouteTablePublic

  # Give public subnets 1 NAT Gateway each.
  # Allocate Elastic IP to NAT Gateway.
  EIPAZ1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPAZ2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATAZ1:
    Type: AWS::EC2::NatGateway  
    DependsOn: 
      - VPCGatewayAttachment
      - SubnetPublicAZ1
      - EIPAZ1
    Properties:
      AllocationId: !GetAtt EIPAZ1.AllocationId
      SubnetId:
        Ref: SubnetPublicAZ1

  NATAZ2:
    Type: AWS::EC2::NatGateway  
    DependsOn: 
      - VPCGatewayAttachment
      - SubnetPublicAZ2
      - EIPAZ2
    Properties:
      AllocationId: !GetAtt EIPAZ2.AllocationId
      SubnetId:
        Ref: SubnetPublicAZ2        
   



########### ECS ###########################  
  Cluster:
    Type: "AWS::ECS::Cluster"
    DependsOn: VPC    
    Properties:
      ClusterName: !Ref "AWS::StackName"




# These outputs will be shown when you perform the command
# aws cloudformation describe-stacks --region us-west-2
Outputs:
  StacksRegion:
    Value: !Ref 'AWS::Region'